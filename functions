#!/bin/sh

function enc {
  cat | bzip2 | base64
}

function dec {
  if [ -r $1 ]; then
    base64 -d $1 | bzip2 -d
  else
    base64 -d < $1 | bzip2 -d
  fi
}

function renum {
  count=1
  for window in $(tmux list-windows | cut -d: -f1); do
    tmux movew -s ${window} -t ${count} 2>/dev/null
    count=$((count + 1))
  done
}

function first {
  awk '{print $1}'
}
function second {
  awk '{print $2}'
}
function third {
  awk '{print $3}'
}
function nth {
  awk -v nth=$1 '{print $nth}'
}

function t {
  echo -en '\033k'$1'\033\\'  # Set window title.
  if grep HostName ~/.ssh/config | grep $1 | grep -q corp; then
    flags="-tA"
    cmd="tmx 0"
  else
    flags="-ta"
    cmd="tmux -u a -d -t 0 || tmux -u new || zsh || bash"
  fi
  if [[ $# -eq 2 ]] && [[ $2 = "attach" ]]; then
    ssh $flags $1 $cmd
  else
    ssh $flags $1
  fi
}

function tm {
  t $1 attach
}

test -d "${HOME}/.shell_logs" || mkdir "${HOME}/.shell_logs"
command_log () {
  logfile="${HOME}/.shell_logs/${HOSTNAME}"
  current_time=$(date '+%Y/%m/%d %H:%M:%S')
  log_line="${current_time} ${LOGNAME} PWD[${PWD}]"
  test "$BASH_COMMAND" = '' || \
    echo "${log_line} ${BASH_COMMAND}" >> ${logfile}
}
case $SHELL in
  *bash)
    trap command_log DEBUG
  ;;
  *zsh)
    preexec () {
      echo "$(date '+%Y/%m/%d %H:%M:%S') ${LOGNAME} PWD[${PWD}] $1" >> \
        ${HOME}/.shell_logs/${HOSTNAME}
    }
  ;;
esac

function fix_repo {
  echo "Before: $(git config remote.origin.url)"
  URL=$(git config remote.origin.url | \
    sed -e 's/https:\/\//git@/' \
      -e 's/github.com\//github.com:\//' \
      -e '/.git$/! s/$/.git/')
  git remote set-url origin "${URL}"
  echo "After: $(git config remote.origin.url)"
  ssh-add ${HOME}/.ssh/github_rsa
}

function cel {
  # https://github.com/Dinduks/change-execute-loop
  # Usage:
  # cel foo.c "gcc foo.c && ./a.out"
  # cel . cat file.txt

  ls --version 2>&1 | grep -qi gnu
  if [ $? = 0 ]; then
    checker="ls -lR --full-time $1"
  elif [ "`uname`" = "Darwin" ]; then
    checker="ls -lRT $1"
  else
    echo "bad ls"
    exit 1
  fi

  command="${@: 2:$#}"
  checksum=`eval $checker`
  watched_file=$1

  # Execute the specified command the first time the script's called
  eval $command

  while true; do
    if [ "$checksum" != "`eval $checker`" ]; then
      checksum="`eval $checker`"
      eval $command
    fi
    sleep 0.1;
  done
}

function multi {
  cmd=$1
  shift
  while [[ $cmd = "ssh" ]]; do
    pre_check="$(echo $@ | tr ' ' '\n' | sed -e 's/^.*@//g' | \
                 xargs nmap -p 22 -PN -oG - | grep Port | grep -v open)"
    test "${pre_check}x" != "x" && (clear; echo "$pre_check") || break
  done
  tmux send-keys -t 0 "$cmd ${@[1]}"
  for ((pane = 1; pane < ${#@[@]}; pane++)); do
    tmux splitw -h
    tmux send-keys -t $pane "$cmd ${@[pane+1]}"
    tmux select-layout tiled > /dev/null
  done
  tmux set-window-option synchronize-panes on > /dev/null
  tmux set-window-option pane-active-border-style fg=red > /dev/null
  tmux set-window-option pane-border-style fg=yellow > /dev/null
  tmux send-keys Enter
}

function rerun {
  sleep=2
  if [[ ${@[1]} = "-d" ]]; then
    sleep=${@[2]}
    shift 2
  fi
  while true; do
    for pane in $@; do
      tmux send-keys -t $pane Up Enter
      sleep $sleep
    done
  done
}

#### SSH AGENT SHIT ############################################################
#function sshagent_findsockets {
#  # Only find the oldest one.
#  find /tmp -uid $(id -u) -type s -name agent.\* -print0 2>/dev/null | \
#    xargs -0 ls -t1 | head -n 1
#}
#
#function sshagent_testsocket {
#  if [ ! -x "$(which ssh-add)" ] ; then
#    echo "ssh-add is not available; agent testing aborted"
#    return 1
#  fi
#
#  if [ X"$1" != X ] ; then
#    export SSH_AUTH_SOCK=$1
#  fi
#
#  if [ X"$SSH_AUTH_SOCK" = X ] ; then
#    return 2
#  fi
#
#  if [ -S $SSH_AUTH_SOCK ] ; then
#    ssh-add -l > /dev/null
#    if [ $? = 2 ] ; then
#      echo "Socket $SSH_AUTH_SOCK is dead!  Deleting!"
#      rm -f $SSH_AUTH_SOCK
#      return 4
#    else
#      echo "Found ssh-agent $SSH_AUTH_SOCK"
#      return 0
#    fi
#  else
#    echo "$SSH_AUTH_SOCK is not a socket!"
#    return 3
#  fi
#}
#
#function sshagent_init {
#  # ssh agent sockets can be attached to a ssh daemon process or an
#  # ssh-agent process.
#
#  AGENTFOUND=0
#
#  # Attempt to find and use the ssh-agent in the current environment
#  if sshagent_testsocket ; then AGENTFOUND=1 ; fi
#
#  # If there is no agent in the environment, search /tmp for
#  # possible agents to reuse before starting a fresh ssh-agent
#  # process.
#  if [ $AGENTFOUND = 0 ] ; then
#    for agentsocket in $(sshagent_findsockets) ; do
#      if [ $AGENTFOUND != 0 ] ; then break ; fi
#      if sshagent_testsocket $agentsocket ; then AGENTFOUND=1 ; fi
#    done
#  fi
#
#  # If at this point we still haven't located an agent, it's time to
#  # start a new one
#  if [ $AGENTFOUND = 0 ] ; then
#    eval `ssh-agent`
#  fi
#
#  # Clean up
#  unset AGENTFOUND
#  unset agentsocket
#
#  # Finally, show what keys are currently in the agent
#  ssh-add -l
#}
