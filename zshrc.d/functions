#!/bin/bash
function dc {
  conf="${HOME}/docker/docker-compose.yml"
  test -r ./docker-compose.yml && conf='./docker-compose.yml'
  docker compose -f "${conf}" "$@"
}

function renum {
  count=1
  for window in $(tmux list-windows | cut -d: -f1); do
    tmux movew -s ${window} -t ${count} 2>/dev/null
    count=$((count + 1))
  done
}

function first {
  awk '{print $1}'
}
function second {
  awk '{print $2}'
}
function third {
  awk '{print $3}'
}
function nth {
  awk -v nth=$1 '{print $nth}'
}

function spin {
  s=0.2
  sp='/-\|'
  while true; do
    printf '\b%.1s' "$sp"
    sp=${sp#?}${sp%???}
    sleep $s
  done
}

function title {
  echo -ne "\033]0;$1\007"
}

test -d "${HOME}/.shell_logs" || mkdir "${HOME}/.shell_logs"
case $SHELL in
  *bash)
    command_log () {
      logfile="${HOME}/.shell_logs/${HOSTNAME}"
      current_time=$(date '+%Y/%m/%d %H:%M:%S')
      log_line="${current_time} ${LOGNAME} PWD[${PWD}]"
      test "$BASH_COMMAND" = '' || \
        echo "${log_line} ${BASH_COMMAND}" >> ${logfile}
    }
    trap command_log DEBUG
  ;;
  *zsh)
    preexec () {
      echo "$(date '+%Y/%m/%d %H:%M:%S') ${LOGNAME} PWD[${PWD}] $1" >> \
        ${HOME}/.shell_logs/${HOSTNAME}
    }
  ;;
esac

function cel {
  # Usage: cel file1 file2 ... fileN "command"

  local files=()
  local command="$@"
  local num_args=$#

  if [ $num_args -lt 2 ]; then
    echo "Usage: cel file1 file2 ... fileN \"command\""
    return 1
  fi

  # Extract command (last argument)
  command="${@:$num_args:1}"

  if [[ -n "$ZSH_VERSION" ]]; then
    # Zsh array slicing
    files=("${@:1:$((num_args - 1))}")
  else
    # Bash compatible array creation
    for ((i=1; i<num_args; i++)); do
      files+=("${@:$i:1}")
    done
  fi

  local checksum=""

  while true; do
    local current_checksum=""
    for file in "${files[@]}"; do
      if [[ -e "$file" ]]; then
        current_checksum+="$(stat -c '%Y:%s' "$file")"
      else
        current_checksum+="FILE_DOES_NOT_EXIST_$file"
      fi
    done

    if [[ "$checksum" != "$current_checksum" ]]; then
      checksum="$current_checksum"
      clear
      eval "$command"
    fi
    sleep 0.1
  done
}

function multi {
  cmd=$1
  shift
  window=$(tmux display-message -p '#S:#I')
  # My tmux panes start at 1.
  tmux send-keys -t ${window}.1 "$cmd ${@[1]}"
  for ((pane = 2; pane <= ${#@[@]}; pane++)); do
    tmux splitw -h -t $window
    tmux send-keys -t ${window}.${pane} "$cmd ${@[pane]}"
    tmux select-layout -t $window tiled > /dev/null
  done
  tmux set-window-option -t $window synchronize-panes on > /dev/null
  tmux set-window-option -t $window pane-active-border-style fg=red > /dev/null
  tmux set-window-option -t $window pane-border-style fg=yellow > /dev/null
  tmux send-keys -t ${window}.1 Enter
}

function rerun {
  sleep=2
  keys="Up Enter"
  if [[ $1 = "-d" ]]; then
    sleep=$2
    shift 2
  fi
  if [[ $1 = "-k" ]]; then
    keys=$2
    shift 2
  fi
  while true; do
    for pane in "$@"; do
      tmux send-keys -t "$pane" "$keys"
      sleep "$sleep"
    done
  done
}
