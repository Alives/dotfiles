#!/bin/bash
function sock {
  if [[ -z $1 ]]; then
    echo 'Provide a sock name.'
  else
    export SSH_AUTH_SOCK=${HOME}/.ssh_agent.$1.sock
    rm -f $SSH_AUTH_SOCK
    eval $(ssh-agent -a $SSH_AUTH_SOCK)
  fi
}

function enc {
  cat | bzip2 | base64
}

function dc {
  conf='/root/docker/docker-compose.yml'
  test -r ./docker-compose.yml && conf='./docker-compose.yml'
  docker-compose -f "${conf}" "$@"
}

function dec {
  if [ -r $1 ]; then
    base64 -d $1 | bzip2 -d
  else
    base64 -d < $1 | bzip2 -d
  fi
}

function renum {
  count=1
  for window in $(tmux list-windows | cut -d: -f1); do
    tmux movew -s ${window} -t ${count} 2>/dev/null
    count=$((count + 1))
  done
}

function first {
  awk '{print $1}'
}
function second {
  awk '{print $2}'
}
function third {
  awk '{print $3}'
}
function nth {
  awk -v nth=$1 '{print $nth}'
}

function spin {
  s=0.2
  sp='/-\|'
  while true; do
    printf '\b%.1s' "$sp"
    sp=${sp#?}${sp%???}
    sleep $s
  done
}

function title {
  echo -ne "\033]0;$1\007"
}

function t {
  echo -en '\033k'$1'\033\\'  # Set window title.
  cmd="tmx2 a || tmux -u a -d -t 0 || tmux -u new || zsh || bash"
  if [[ $# -eq 2 ]] && [[ $2 = "attach" ]]; then
    ssh -ta $1 $cmd
  else
    ssh -ta $1
  fi
}

function tm {
  t $1 attach
}

test -d "${HOME}/.shell_logs" || mkdir "${HOME}/.shell_logs"
case $SHELL in
  *bash)
    command_log () {
      logfile="${HOME}/.shell_logs/${HOSTNAME}"
      current_time=$(date '+%Y/%m/%d %H:%M:%S')
      log_line="${current_time} ${LOGNAME} PWD[${PWD}]"
      test "$BASH_COMMAND" = '' || \
        echo "${log_line} ${BASH_COMMAND}" >> ${logfile}
    }
    trap command_log DEBUG
  ;;
  *zsh)
    preexec () {
      echo "$(date '+%Y/%m/%d %H:%M:%S') ${LOGNAME} PWD[${PWD}] $1" >> \
        ${HOME}/.shell_logs/${HOSTNAME}
    }
  ;;
esac

function fix_repo {
  echo "Before: $(git config remote.origin.url)"
  URL=$(git config remote.origin.url | \
    sed -e 's/https:\/\//git@/' \
      -e 's/github.com\//github.com:\//' \
      -e '/.git$/! s/$/.git/')
  git remote set-url origin "${URL}"
  echo "After: $(git config remote.origin.url)"
  ssh-add ${HOME}/.ssh/github_rsa
}

function cel {
  # https://github.com/Dinduks/change-execute-loop
  # Usage:
  # cel foo.c "gcc foo.c && ./a.out"
  # cel . cat file.txt

  ls --version 2>&1 | grep -qi gnu
  if [ $? = 0 ]; then
    checker="ls -lR --full-time $1"
  elif [ "`uname`" = "Darwin" ]; then
    checker="ls -lRT $1"
  else
    echo "bad ls"
    exit 1
  fi

  command="${@: 2:$#}"
  checksum=
  watched_file=$1

  while true; do
    if [ "$checksum" != "`eval $checker`" ]; then
      checksum="`eval $checker`"
      clear
      eval $command
    fi
    sleep 0.1
  done
}

function multi {
  cmd=$1
  shift
  window=$(tmux display-message -p '#S:#I')
  if [[ "$(which ssh)" = "/usr/bin/ssh" ]]; then
    while [[ $cmd = "ssh" ]]; do
      pre_check="$(echo $@ | tr ' ' '\n' | sed -e 's/^.*@//g' | \
                   xargs nmap -p 22 -PN -oG - | grep Port | grep -v open)"
      test "${pre_check}x" != "x" && (clear; echo "$pre_check") || break
    done
  fi
  # My tmux panes start at 1.
  tmux send-keys -t ${window}.1 "$cmd ${@[1]}"
  for ((pane = 2; pane <= ${#@[@]}; pane++)); do
    tmux splitw -h -t $window
    tmux send-keys -t ${window}.${pane} "$cmd ${@[pane]}"
    tmux select-layout -t $window tiled > /dev/null
  done
  tmux set-window-option -t $window synchronize-panes on > /dev/null
  tmux set-window-option -t $window pane-active-border-style fg=red > /dev/null
  tmux set-window-option -t $window pane-border-style fg=yellow > /dev/null
  tmux send-keys -t ${window}.1 Enter
}

function rerun {
  sleep=2
  keys="Up Enter"
  if [[ $1 = "-d" ]]; then
    sleep=$2
    shift 2
  fi
  if [[ $1 = "-k" ]]; then
    keys=$2
    shift 2
  fi
  while true; do
    for pane in "$@"; do
      tmux send-keys -t "$pane" "$keys"
      sleep "$sleep"
    done
  done
}
